using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Unity.VisualScripting;
using UnityEngine;

public class cshGrab : MonoBehaviour
{
    private bool isFollow = false; //스틱이 커서를 쫓아가는지
    //private Vector3 offset;
    public float objSpeed = 0.2f;
    //private Vector3 offset;

    // Update is called once per frame
    void Update()
    {
        if (Input.GetMouseButtonDown(0))
        {
            RaycastHit hit = CastRay();
            if (hit.transform == transform)
            {
                this.GetComponent<Rigidbody>().useGravity = false; //중력 없애기
                isFollow = true;// 마우스를 따라다니도록 설정
                //Debug.Log("you grabbed it on.");
                //offset = transform.position - hit.point;
            }
        }
        if (Input.GetMouseButtonUp(0))
        {
            isFollow = false;
            this.GetComponent <Rigidbody>().useGravity = true;
            //Debug.Log("you grabbed it off.");
        }
        if (isFollow)
        {
            /*
            Vector3 mousePos = Camera.main.ScreenToWorldPoint(Input.mousePosition);// - offset;
            Debug.Log(mousePos);//<-이게문제임
            Debug.Log(offset);
            transform.position = new Vector3(mousePos.x, transform.position.y + 0.05f, mousePos.y); 
            // 2차원에선 z좌표가 y좌표이므로 newPosition.y를 z값에 적용
            */
            Vector3 position = new Vector3(Input.mousePosition.x, Input.mousePosition.y, Camera.main.WorldToScreenPoint(transform.position).z);
            Vector3 worldPosition = Camera.main.ScreenToWorldPoint(position);
            transform.position = new Vector3(worldPosition.x, 0.5f, worldPosition.z);
        }

        


        //15도 회전
        if (Input.GetMouseButtonDown(1))
        {
            RaycastHit hit1;
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            if (Physics.Raycast(ray, out hit1) && hit1.collider.gameObject == gameObject)
            {
                transform.Rotate(Vector3.up, 45.0f);
            }
        }
    }
    private RaycastHit CastRay(){
        // 마우스 커서가 가리키는 카메라가 랜더링하는 가장 먼곳의 위치 ScreenPoint Vector3 position
        Vector3 screenMousePosFar = new Vector3(
            Input.mousePosition.x,
            Input.mousePosition.y,
            Camera.main.farClipPlane);
        // 마우스 커서가 가리키는 카메라가 랜더링하는 가장 가까운곳의 위치 ScreenPoint Vector3 position
        Vector3 screenMousePosNear = new Vector3(
            Input.mousePosition.x,
            Input.mousePosition.y,
            Camera.main.nearClipPlane);

        // 각 위치를 WorldPosition으로 변경
        Vector3 worldMousePosFar = Camera.main.ScreenToWorldPoint(screenMousePosFar);
        Vector3 worldMousePosNear = Camera.main.ScreenToWorldPoint(screenMousePosNear);

        // RaycastHit 정보를 담을 변수 생성
        RaycastHit hit;
        // 현재 worldMousePosNear에서 시작하고 worldMousePosFar로 향하는 Raycast를 생성한다
        Physics.Raycast(worldMousePosNear, worldMousePosFar-worldMousePosNear, out hit);

        // 정보를 가진 hit 반환
        return hit;
    }
}
